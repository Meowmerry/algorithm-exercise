@startuml treeCreatorUML

control MakeTreeCreator                             
control TreeCreator           
control TreeGraphFactory  
entity Node  
control helper
entity deleteParent
entity compareStateAndProps
entity Window

MakeTreeCreator -> TreeCreator : closed over \nwasMounted, prevTreeGraph, \nreturns function 
TreeCreator -> TreeGraphFactory : treeGraphFactor(fiberRoot);
TreeGraphFactory -> Node : treeGraph = new Node(name, null, [], fiber);
TreeGraphFactory -> helper: helper(fiber, treeGraph)
helper -> helper: recursively reads Fiber child, sibling \nand creates array of children, parent.children
TreeCreator <- TreeGraphFactory: return treeGraph
TreeCreator -> deleteParent: delete parents from treeGraph
TreeCreator <- deleteParent: return pruned treeGraph
TreeCreator -> compareStateAndProps: compareStateAndProps(treeGraph, prevTreeGraph, null)
compareStateAndProps -> compareStateAndProps: update node colors based on \n1.)initial load  \n2.) when nodes diff \n3.)no prevNode
TreeCreator <- compareStateAndProps: return TreeGraph with colored nodes
TreeCreator -> TreeCreator: prevTreeGraph = tempTreeGraph \nwasMounted = true;
TreeCreator -> Window: send TreeGraph
@enduml